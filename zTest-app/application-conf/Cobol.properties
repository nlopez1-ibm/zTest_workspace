# Project properties used by zAppBuild/language/Cobol.groovy

# default COBOL program build rank - used to sort build file list
# leave empty - overridden by file properties
cobol_fileBuildRank= 10 :: **/*sub*, 20 :: **/datc*,30 :: **/datmp*


# COBOL dependency resolution rules (Scanner)
# Rules defined in application.properties
cobol_resolutionRules=[${copybookRule}]

#
# default COBOL compiler version
# can be overridden by file properties
#cobol_compilerVersion=V6
cobol_compilerVersion=V4

#
# default COBOL maximum RCs allowed
# can be overridden by file properties
cobol_compileMaxRC=4
cobol_linkEditMaxRC=0

#
# default COBOL compiler parameters
# can be overridden by file properties
cobol_compileParms=source,cp(37)

#cobol_compileCICSParms=CICS
cobol_compileCICSParms=CICS,SOURCE,NOSEQ,COBOL3,NODEBUG

#cobol_compileSQLParms=SQL('HOST(COBOL),ONEPASS,CCSID(37),APOSTSQL,SQL(DB2),STDSQL(YES)')
#cobol_compileSQLParms=SQL('APOSTSQL,SQL(DB2),STDSQL(YES)')
cobol_compileSQLParms=HOST(IBMCOB),APOST,APOSTSQL,SOURCE,XREF,VERSION(AUTO),CCSID(37)


## For coproc sql parms see https://www.ibm.com/support/pages/syntax-needed-specify-sql-coprocessor-option-exec-parm-statement
## also https://www.ibm.com/support/knowledgecenter/SSEPEK_10.0.0/apsg/src/tpc/db2z_descriptionprocessingoptions.html
## Some coproc options are mutually exclusive with the cobol compiler  like margins and host. CCSID can be override by the lang option 
cobol_compileErrorPrefixParms=ADATA,EX(ADX(ELAXMGUX))



# Compile Options for IBM Debugger. Assuming to keep Dwarf Files inside the load.
# If you would like to separate debug info, additional allocations needed (See COBOL + Debugger libraries)
# NJL For SEP Mode:  alloc a file in the compiler for the sysdebug lrecl=1024,fb,blksize=0
#                    preallocate for testing as nlopez.sysdebug (on wazi06) see https://help.blueproddoc.com/adfz_common_components/1.8.0/en/eqabus01175.html
# need //EQADEBUG DD DSN=NLOPEZ.SYSDEBUG,DISP=SHR  in test job 
cobol_compileDebugParms=TEST(SOURCE,SEPARATE)



#cobol_compileDebugParms=TEST



## NJL Note for above to be in effect you need to set a prod debug to notNull.   !!!
## or in build.groovy --debug  (but a pain as you have to add/remove in the configure panel
##                             and not part of one click user build -
##                             but then again, set as a prop here forces it in a pipeline too!
##                              Demo with --debug in build.groovy args  
##debug=y

#
# default LinkEdit parameters
# can be overridden by file properties
cobol_linkEditParms     = XREF
#cobol_linkEditStream    =



## NJL testing 
##cobol_linkEditStream    =    INCLUDE SYSLIB(DSNHLI)  \n INCLUDE OBJECT(@{member})  \n    INCLUDE SYSLIB(EQAD3CXT)  \n 
##    NAME @{member}(R)  \n ENTRY   @{member} 
#cobol_linkEditStream=   INCLUDE OBJECT(@{member}) \n IDENTIFY @{member}(ABC..........................x) \n      ENTRY   @{member} \n NAME @{member}(R)

# sample ident card max 80 bytes part of the CSECT identification records (IDR)       
cobol_linkEditStream=   INCLUDE OBJECT(@{member}) \n   IDENTIFY @{member}(DBB\ABC................................x)  
  


# If using a debug exit, provide the SYSLIN instream DD
# Samp: cobol_linkDebugExit=    INCLUDE OBJECT(@{member})  \n    INCLUDE SYSLIB(EQAD3CXT)
#cobol_linkDebugExit=    INCLUDE OBJECT(@{member})  \n    INCLUDE SYSLIB(EQAD3CXT)

#
# execute link edit step
# can be overridden by file properties
cobol_linkEdit=true

#
# scan link edit load module for link dependencies
# can be overridden by file properties
cobol_scanLoadModule=true

#
# additional libraries for compile SYSLIB concatenation, comma-separated
cobol_compileSyslibConcatenation=

#
# additional libraries for linkEdit SYSLIB concatenation, comma-separated
# njl example of concatenation of pre-existing dev and prod libs with a user's load
#     - Users load is what IDz or a pipline create/uses (-hlq prefix)
#     -Team load is for System integration testing where a user build can pick
#      a team level module
#     -Prod load is where production level loads are included
#     - Users must clear out their load and/or  team load at the end of a sprint
cobol_linkEditSyslibConcatenation=${hlq}.LOAD,${team}.LOAD,DAT.PROD.LOAD

## njl - Special case to demo how to include (non-migrated) generated BMS map
## Add this prop to define a HLQ of the  cobol_bms_copy prop in build-conf/cobol.prop..
## This concate that PDS to cobol syslib to include existing bks. note there is no auto
## publish code to update those Team PDS's and gen'd bks are not stored in git.
team=DAT.TEAM

