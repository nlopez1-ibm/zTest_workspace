## NJL - Sample pgm level build options overrides

## Default compiler and link options are normally provided in a language.property file under the
## application-conf folder like Cobol.properties. To override any default, simply create a file in this folder
## with the name of the program and an extension of '.properties' and add the code snippet below to your language script like Cobol.groovy.
##
## For example, this sample replaces the default cobol_compileParms for pgm datmpmt.cbl.
## This overrides the value in Cobol.properties.  Any or all defaults can be overridden.
## New values can be added to drive any new groovy logic.  For example if you need to build a source file as both batch and CICS
## create a new property here and its default in Cobol.properties.


# special compiler parms for this example pgm (datdemo) 
# added the test option to gen a sep file (BUB) as an example for cobol 4 shops
# use nosep for cob6 shops (model Mlife)
cobol_compileDebugParms=TEST(SEPARATE,SOURCE)


# If you would like to have a physical link card, we generated it for you given the below pattern
# This property has priority over cobol_linkDebugExit
## Build Parms Section
# njl cobol_linkEditStream sample
## ?? cobol_linkEditStream =  INCLUDE  RESLIB(CBLTDLI)\n  INCLUDE  SYSLIB(${member})\n   ENTRY    DLITCBL\n  NAME     ${member}(R)

cobol_CICS_MQ_linkStream  = INCLUDE SYSLIB(CSQCSTUB)\n
cobol_BATCH_MQ_linkStream = INCLUDE SYSLIB(CSQBSTUB)\n
cobol_linkEditStream      = INCLUDE SYSLIB(@{member})\n  ENTRY @{member}\n NAME @{member}(R)



## Below are some cobol options that can be overridden for this sample pgm (datmpmt)
## Options for any language can be specified.
##cobol_compileCICSParms=CICS
##cobol_compileSQLParms=SQL
##cobol_compilerVersion=V6
##cobol_compileErrorPrefixParms=ADATA,EX(ADX(ELAXMGUX))
##cobol_linkEditParms=MAP,RENT,COMPAT(PM5)
##cobol_linkEdit=true
##

##Language snippet - add this to the main loop of a language script just before the MVSEXEC api (remove the leading ##)
##
##  File refreshAppDefaults  = new File(buildUtils.getAbsolutePath(props.application) + "/application-conf/Cobol.properties")
##  props.load(refreshAppDefaults)	
##  File getPgmOptions   = new File(buildUtils.getAbsolutePath(props.application) + "/application-conf/pgmOptions/${member.toLowerCase()}.properties")
##  if(getPgmOptions.exists()){
## 	println "** pgmOptions in effect. Using build prop overrides in  ${member.toLowerCase()}.properties"		
##	props.load(getPgmOptions)		
##  }
##  // NJL Snippet - end
##
##	


## When this pgm is built it will see dualBuild=True and perform extra groovy process to create 2 load modules (that code is not provided)
## alternate dual mode option but not in effect. Using folder name instead.
##dualBuild=true




